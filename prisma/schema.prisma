generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String      @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategpry")
  products    Product[]   @relation("StoreToProduct") 
  orders      Order[]     @relation("StoreToOrder")
  shipping    Shipping[]  @relation("StoreToShipping")
  gallery     Gallery[]   @relation("StoreToGallery")
  createdAt   DateTime    @default(now()) 
  updatedAt   DateTime    @updatedAt()
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String 
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String 
  store       Store       @relation("StoreToCategpry", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  products    Product[]   @relation("CategoryToProduct")
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt()

  @@index([storeId])
  @@index([billboardId])
}

model Color {
  id          String      @id @default(uuid())
  productId   String
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)    
  name        String
  value       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
 
  @@index([productId])
}

model Image {
  id          String      @id @default(uuid())
  productId   String
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String 
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String?     @db.Text
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  size        String        
  colors       Color[]     
  shippingId  String
  shipping    Shipping    @relation( fields: [shippingId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt


  @@index([shippingId])
  @@index([storeId])
  @@index([categoryId])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[] 
  isPaid      Boolean     @default(false)
  phone       String      @default("")
  address      String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id          String      @id @default(uuid())
  orderId     String
  order       Order       @relation(fields: [orderId], references: [id])
  productId   String
  product     Product     @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Shipping {
  id          String      @id @default(uuid())
  name        String
  storeId     String
  store       Store       @relation("StoreToShipping", fields: [storeId], references: [id])
  product     Product[]
  isFixed     Boolean     @default(false)     
  price       Decimal     @default(0)
  width       Decimal?
  length      Decimal?
  height      Decimal?
  weight      Decimal?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Gallery {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToGallery", fields: [storeId], references: [id])
  images      GalleryImages[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model GalleryImages {
  id          String      @id @default(uuid())
  galleryId   String
  gallery     Gallery     @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([galleryId])
}
